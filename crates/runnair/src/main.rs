use vm::{Instruction, Program, VM};

pub mod memory;
pub mod vm;

fn main() {
    let instructions: [[&str; 4]; 20] = [
        ["0xa", "0x3", "0x0", "0x0"],
        ["0x47", "0x0", "0xf4240", "0x0"],
        ["0x45", "0x0", "0x7ffffffc", "0x0"],
        ["0x26", "0x0", "0x1", "0x0"],
        ["0x26", "0x0", "0x1", "0x0"],
        ["0x20", "0x0", "0x0", "0x0"],
        ["0x5a", "0x4", "0x0", "0x0"],
        ["0x23", "0x7ffffffe", "0x7ffffffc", "0x1"],
        ["0x1c", "0x0", "0x2", "0x7ffffffc"],
        ["0xab", "0x0", "0x0", "0x0"],
        ["0xa9", "0x3", "0x7ffffffc", "0x0"],
        ["0x20", "0x0", "0x7ffffffb", "0x0"],
        ["0xab", "0x0", "0x0", "0x0"],
        ["0x2e", "0x0", "0x7ffffffa", "0x7ffffffa"],
        ["0x2e", "0x0", "0x7ffffffb", "0x7ffffffb"],
        ["0x20", "0x0", "0x7ffffffb", "0x0"],
        ["0x12", "0x0", "0x7ffffffc", "0x7ffffffd"],
        ["0x1c", "0x0", "0x7ffffffe", "0x7ffffffc"],
        ["0x5a", "0x7ffffff7", "0x0", "0x0"],
        ["0xab", "0x0", "0x0", "0x0"],
    ];
    let instructions: Vec<_> = instructions
        .into_iter()
        .map(|instruction| {
            let raw_instruction =
                instruction.map(|x| u32::from_str_radix(x.trim_start_matches("0x"), 16).unwrap());
            Instruction::from(raw_instruction)
        })
        .collect();

    let mut vm = VM::create_for_main_execution(Program { instructions });
    vm.execute();
}
